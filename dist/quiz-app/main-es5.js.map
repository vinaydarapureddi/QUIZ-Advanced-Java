{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/api.service.ts","webpack:///src/app/app-routing.module.ts","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.module.ts","webpack:///src/app/components/question-answer-form/question-answer-form.component.ts","webpack:///src/app/components/question-answer-form/question-answer-form.component.html","webpack:///src/app/datamodel/answer.ts","webpack:///src/app/services/exam.service.ts","webpack:///src/environments/environment.ts","webpack:///src/main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","API_URL","apiUrl","ApiService","http","get","data","post","routes","AppRoutingModule","forRoot","imports","AppComponent","title","selector","templateUrl","styleUrls","AppModule","declarations","providers","bootstrap","QuestionAnswerFormComponent","examService","apiService","answer","getAllQuestions","alert","content","save","getAllQuestin","subscribe","console","log","questions","JSON","parse","requestObj","answersArr","i","length","question","element","document","querySelector","answerSelected","correctanswer","getCorrectAnswer","answers","idtoshow","getElementById","style","display","push","arr","isCorrectAnswer","submitAnswers","Answer","ExamService","httpClient","url","providedIn","environment","production","bootstrapModule","err","error"],"mappings":"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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { Injectable } from '@angular/core';\r\nimport { environment } from 'src/environments/environment';\r\nimport { Http } from '@angular/http';\r\n\r\n\r\nconst API_URL = environment.apiUrl;\r\n\r\n@Injectable()\r\nexport class ApiService {\r\n    constructor(\r\n        private http: Http\r\n        ) { }\r\n\r\n    getAllQuestin(){\r\n        return this.http\r\n                .get(API_URL + 'getAllQuestions');\r\n               \r\n    }\r\n\r\n    submitAnswers(data:any){\r\n        return this.http\r\n        .post(API_URL + 'submitAnswers',data);\r\n    }\r\n}","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\n\nconst routes: Routes = [];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'quiz-app';\n}\n","<app-question-answer-form></app-question-answer-form>","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { HttpClientModule } from '@angular/common/http';\nimport { FormsModule } from '@angular/forms';\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { QuestionAnswerFormComponent } from './components/question-answer-form/question-answer-form.component';\nimport { ApiService } from './api.service';\nimport { HttpModule } from '@angular/http';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    QuestionAnswerFormComponent\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    FormsModule,\n    HttpModule,\n    HttpClientModule,\n  ],\n  providers: [ApiService],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Component, OnInit } from '@angular/core';\nimport { Answer } from 'src/app/datamodel/answer';\nimport { ExamService } from 'src/app/services/exam.service';\nimport { ApiService } from 'src/app/api.service';\n\n@Component({\n  selector: 'app-question-answer-form',\n  templateUrl: './question-answer-form.component.html',\n  styleUrls: ['./question-answer-form.component.css']\n})\nexport class QuestionAnswerFormComponent implements OnInit {\n\n  answer : Answer = new Answer(\"text\");\n  questions:any;\n  constructor(private examService : ExamService, public apiService:ApiService) { }\n\n  ngOnInit(): void {\n    this.getAllQuestions();\n  }\n\n  show(){\n    alert(this.answer.content);\n  }\n\n  save(){\n    this.examService.save(this.answer);\n  }\n\n  getAllQuestions(){\n    this.apiService.getAllQuestin().subscribe(\n      data => {\n        console.log(data);\n        this.questions = JSON.parse(data['_body'])\n      }\n  ); \n  }\n\n  submitAnswers(){\n    let requestObj = {};\n    requestObj['userId'] = 'abcd';\n    let answersArr = [];\n    for(let i=0;i<this.questions.length;i++){\n      let question = this.questions[i];\n      let element = document.querySelector('input[name=\"'+question.id+'\"]:checked');\n      let answerSelected = document.querySelector('input[name=\"'+question.id+'\"]:checked')['value'];\n      let correctanswer = this.getCorrectAnswer(question.answers);\n      if(correctanswer != answerSelected){\n        let idtoshow = \"wrongansmsg\"+question.id;\n        document.getElementById(idtoshow).style.display=\"block\";\n      } else {\n          let idtoshow = \"correctansmsg\"+question.id;\n          document.getElementById(idtoshow).style.display=\"block\";\n      }\n      answersArr.push({'questionId':question.id, 'question':question.title, 'answerId':answerSelected});\n    }\n    return false;\n  //   requestObj['questionAnswers'] = answersArr;\n  //   this.apiService.submitAnswers(requestObj).subscribe(\n  //     data => {\n  //       console.log(data);\n  //       alert('Successfully submitted');\n  //     }\n  // ); \n  }\n  getCorrectAnswer(arr){\n    for(let i=0;i<arr.length;i++){\n      if(arr[i].isCorrectAnswer == 1){\n        return arr[i]['id'];\n      }\n    }\n  }\n\n}\n","<div *ngFor=\"let question of questions\">\n    <p><b>{{question.title}}</b></p>\n     <div *ngFor=\"let answer of question.answers\">\n    <input type=\"radio\" id=\"male\" name=\"gender\" value=\"{{answer.id}}\" name=\"{{question.id}}\">\n    <label for=\"male\">{{answer.content}}</label><br>\n    </div>\n    <label style=\"color:red; display:none\" id=\"ansmsg{{question.id}}\">Wrong Answer</label>\n    <label style=\"color:green; display:none\" id=\"ansmsg{{question.id}}\">Correct Answer</label>\n</div>\n\n<button class=\"button primary\" (click)=\"submitAnswers()\">Submit</button>\n","export class Answer {\n \n    content :string;\n \n    constructor(content : string){\n        this.content = content;\n    }\n \n \n \n}","import { Injectable } from '@angular/core';\nimport { Answer } from '../datamodel/answer';\nimport { HttpClient } from '@angular/common/http';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ExamService {\n  url :string =\"http://localhost:8080/quiz-rest/rest/exam/answer\";\n\n  constructor(private httpClient: HttpClient) { }\n\n  save(answer : Answer){\n    this.httpClient.post(this.url, answer).subscribe((data) =>\n    console.log(data)\n  );\n  }\n\n\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false,\n  apiUrl:'http://localhost:8080/quiz-rest/exam/',\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"]}